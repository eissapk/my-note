{"version":3,"sources":["app.js"],"names":["navigator","window","addEventListener","serviceWorker","register","then","res","console","log","catch","err","Nav","modeCon","document","getElementById","mode","e","_document$querySelect2","_slicedToArray","querySelectorAll","moon","sun","stylesheet","querySelector","target","classList","contains","add","remove","removeAttribute","setAttribute","Header","timeCon","dateCon","date","Date","hours","getHours","hours_12","h","am_pm","String","length","concat","minutes","getMinutes","m","month","getMonth","day","getDate","innerHTML","Tabs","slider","btnsCon","isDown","all","elm","tabs","forEach","item","checked","parentElement","titles","title","arr","Store","getTask","tasks","value","task","id","getAttribute","tab","localStorage","setItem","JSON","stringify","scrollBy","top","left","behavior","startX","pageX","offsetLeft","scrollLeft","preventDefault","walk","touches","stopPropagation","UI","addNoteBtnCon","saveBtn","delBtnCon","tabNum","this","settingsBtn","settingsCloseBtn","settingsLayer","file","data","getItem","parse","a","createElement","_file","Blob","type","href","URL","createObjectURL","toISOString","replace","download","click","alert","reader","FileReader","readAsText","files","onload","result","slice","call","animateTabBtn","loadTasks","style","display","layer","textarea","focus","btn","num","div","className","insertBefore","noteTitle","parent","child","prevTab","previousElementSibling","nextElementSibling","removeTab","Promise","resolve","reject","input","currentTab","trim","li","makeId","getTabTitle","append","addTask","tasksNum","inputBox","setTimeout","removeTask","editBox","hideTextarea","innerText","editTask","getTime","numCon","textContent","myTabs","Array","from","differ","lastTap","cursor","toLowerCase","myTasks","filteredTasks","filter","includes","text","_classCallCheck","attr","myTask","push","index","splice","ts","_step","addBtn","regex","map","_iterator","_createForOfIteratorHelper","_toConsumableArray","Set","_loop","i","tasksHolder","s","n","done","f","global","modeSwitcher","tabSwichter","navigateTabs","syncData","showTextarea","addNewTab","selectAll","renameTab","disableRename","syncDate","setInterval","engine","navSliderByMouse","navSliderByTouch"],"mappings":"otFAMI,kBAAmBA,WACnBC,OAAOC,iBAAiB,OAAQ,WAC5BF,UAAUG,cACLC,SAAS,6BACTC,KAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAI,+BACxBC,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,gCAAiCE,WAKjEC,+GAEEA,EAAIC,QAAUC,SAASC,eAAe,QACtCH,EAAII,MAAO,uCAIKC,GAAG,IAAAC,EAAAC,eAECL,SAASM,iBAAiB,gBAF3B,GAEZC,EAFYH,EAAA,GAENI,EAFMJ,EAAA,GAIbK,EAAaT,SAASU,cAAc,oBAEtCP,EAAEQ,OAAOC,UAAUC,SAAS,gBAUxBf,EAAII,KATJJ,EAAII,MAEJK,EAAKK,UAAUE,IAAI,cACnBN,EAAII,UAAUG,OAAO,cAGrBN,EAAWO,gBAAgB,aAGhB,IAIXT,EAAKK,UAAUG,OAAO,cACtBP,EAAII,UAAUE,IAAI,cAGlBL,EAAWQ,aAAa,WAAY,KAGzB,aASrBC,sJAKE,IAAMC,EAAUnB,SAASU,cAAc,YAEjCU,EAAUpB,SAASU,cAAc,WAEjCW,EAAO,IAAIC,KAKXC,EAAQF,EAAKG,WACbC,EAFO,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAElEF,GAGlBG,EAAI,GACJC,EAAQ,GAIRD,EADM,GALDE,OAAOH,GAAUI,OAMrB,IAAAC,OAAOL,GAGP,GAAAK,OAAML,GAKPE,EADS,IAATJ,EACQ,KAEA,KAIZ,IAAMQ,EAAUV,EAAKW,aAEjBC,EAAI,GAGJA,EADM,GAHDL,OAAOG,GAASF,OAIpB,IAAAC,OAAOC,GAGP,GAAAD,OAAMC,GAIX,IACMG,EAAQb,EAAKc,WAGbC,EAAMf,EAAKgB,UAGjBlB,EAAQmB,UAAR,GAAAR,OAAuBJ,EAAvB,OAAAI,OAA8BG,EAA9B,mBAAAH,OAAiDH,EAAjD,QAEAP,EAAQkB,UAAR,GAAAR,OATa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,OASlEI,GAA5B,KAAAJ,OAAsCM,YAMxCG,gHAEEA,EAAKC,OAASxC,SAASC,eAAe,cACtCsC,EAAKE,QAAUzC,SAASU,cAAc,eACtC6B,EAAKG,QAAS,sCAMCvC,GAEf,IAAMwC,EAAM3C,SAASC,eAAe,aAE9B2C,EAAMzC,EAAEQ,OAERkC,EAAO7C,SAASM,iBAAiB,SAEnCH,EAAEQ,OAAOC,UAAUC,SAAS,QAAUV,EAAEQ,OAAOC,UAAUC,SAAS,aAAeV,EAAEQ,OAAOC,UAAUC,SAAS,gBAE7GgC,EAAKC,QAAQ,SAAAC,GAAI,OAAIA,EAAKnC,UAAUG,OAAO,gBAE3C4B,EAAIK,SAAU,GAGd7C,EAAEQ,OAAOC,UAAUC,SAAS,QAE5B+B,EAAIhC,UAAUE,IAAI,cAGlBX,EAAEQ,OAAOC,UAAUC,SAAS,aAE5B+B,EAAIK,cAAcrC,UAAUE,IAAI,cAGhCX,EAAEQ,OAAOC,UAAUC,SAAS,cAE5B+B,EAAIK,cAAcrC,UAAUE,IAAI,kDAOpC,IAAMoC,EAASlD,SAASM,iBAAiB,cAGzC4C,EAAOJ,QAAQ,SAAAK,GAEXA,EAAM9D,iBAAiB,QAAS,SAACc,GAE7B,IAAIiD,EAAMC,MAAMC,UAKVC,EAFMvD,SAASU,cAAc,eAEjBJ,iBAAiB,qBAGnC6C,EAAMlC,aAAa,QAAnB,GAAAa,OAA+B3B,EAAEQ,OAAO6C,QAGxCD,EAAMT,QAAQ,SAAAW,GAEVA,EAAKxC,aAAa,WAAlB,GAAAa,OAAiC3B,EAAEQ,OAAO6C,QAG1CJ,EAAIN,QAAQ,SAAAC,GACJA,EAAKW,IAAMD,EAAKE,aAAa,aAC7BZ,EAAKa,IAAMzD,EAAEQ,OAAO6C,SAK5BK,aAAaC,QAAQ,QAASC,KAAKC,UAAUZ,UAQzDF,EAAOJ,QAAQ,SAAAK,GACXA,EAAMlC,aAAa,QAAnB,GAAAa,OAA+BqB,EAAMK,+CAKzBrD,GACZA,EAAEQ,OAAOC,UAAUC,SAAS,YAC5B0B,EAAKC,OAAOyB,SAAS,CACjBC,IAAK,EACLC,KAAM,IACNC,SAAU,WAIdjE,EAAEQ,OAAOC,UAAUC,SAAS,YAC5B0B,EAAKC,OAAOyB,SAAS,CACjBC,IAAK,EACLC,MAAO,IACPC,SAAU,sDAQlB7B,EAAKC,OAAOnD,iBAAiB,YAAa,SAACc,GAEvCoC,EAAKG,QAAS,EAEdH,EAAK8B,OAASlE,EAAEmE,MAAQ/B,EAAKC,OAAO+B,WAEpChC,EAAKiC,WAAajC,EAAKC,OAAOgC,aAIlCjC,EAAKC,OAAOnD,iBAAiB,aAAc,WAEvCkD,EAAKG,QAAS,IAIlBH,EAAKC,OAAOnD,iBAAiB,UAAW,WAEpCkD,EAAKG,QAAS,IAIlBH,EAAKC,OAAOnD,iBAAiB,YAAa,SAACc,GACvC,GAAIoC,EAAKG,OAAQ,CAEbvC,EAAEsE,iBAEF,IAEMC,EAFIvE,EAAEmE,MAAQ/B,EAAKC,OAAO+B,WAEdhC,EAAK8B,OAEvB9B,EAAKC,OAAOgC,WAAajC,EAAKiC,WAAaE,gDAQnDnC,EAAKC,OAAOnD,iBAAiB,aAAc,SAACc,GAExCoC,EAAKG,QAAS,EAEdH,EAAK8B,OAASlE,EAAEwE,QAAQ,GAAGL,MAAQ/B,EAAKC,OAAO+B,WAE/ChC,EAAKiC,WAAajC,EAAKC,OAAOgC,aAIlCjC,EAAKC,OAAOnD,iBAAiB,WAAY,WAErCkD,EAAKG,QAAS,IAIlBH,EAAKC,OAAOnD,iBAAiB,YAAa,SAACc,GACvC,GAAIoC,EAAKG,OAAQ,CAEbvC,EAAEyE,kBAEF,IAEMF,EAFIvE,EAAEwE,QAAQ,GAAGL,MAAQ/B,EAAKC,OAAO+B,WAEzBhC,EAAK8B,OAEvB9B,EAAKC,OAAOgC,WAAajC,EAAKiC,WAAaE,cASrDG,8GAIEA,EAAGrC,OAASxC,SAASC,eAAe,cACpC4E,EAAGC,cAAgB9E,SAASC,eAAe,WAC3C4E,EAAGE,QAAU/E,SAASC,eAAe,WACrC4E,EAAGG,UAAYhF,SAASU,cAAc,cACtCmE,EAAGlC,IAAM3C,SAASC,eAAe,aACjC4E,EAAGI,OAAS,EAEZC,KAAKC,YAAcnF,SAASU,cAAc,gBAC1CwE,KAAKE,iBAAmBpF,SAASU,cAAc,4BAC/CwE,KAAKG,cAAgBrF,SAASU,cAAc,mDAIhCP,GAEZ,IAAMmF,EAAOtF,SAASU,cAAc,yBAEpC,GAAIP,EAAEQ,OAAOC,UAAUC,SAAS,0CAA2C,CAEvE,IAAM0E,EAAO1B,aAAa2B,QAAQ,SAClC,GAAyB,OAArBzB,KAAK0B,MAAMF,IAAmBxB,KAAK0B,MAAMF,GAAO1D,OAAQ,CAExD,IAAM6D,EAAI1F,SAAS2F,cAAc,KAC3BC,EAAQ,IAAIC,KAAK,CAACN,GAAO,CAC3BO,KAAM,qBAEVJ,EAAEK,KAAOC,IAAIC,gBAAgBL,GAC7B,IAAMvE,GAAO,IAAIC,MAAO4E,cAAcC,QAAQ,QAAS,IAAIA,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAC5FT,EAAEU,SAAF,WAAAtE,OAAwBT,EAAxB,SACAqE,EAAEW,aAEFC,MAAM,2BAEHnG,EAAEQ,OAAOC,UAAUC,SAAS,2CACnCyE,EAAKe,QAITf,EAAKjG,iBAAiB,SAAU,SAAAc,GAC5B,IAAMoG,EAAS,IAAIC,WACnBD,EAAOE,WAAWtG,EAAEQ,OAAO+F,MAAM,IACjCH,EAAOI,OAAS,SAAAxG,GACZ,IAAMoF,EAAOpF,EAAEQ,OAAOiG,OAEtB,GAAyB,OAArB7C,KAAK0B,MAAMF,IAAmBxB,KAAK0B,MAAMF,GAAO1D,OAAQ,CAExDgC,aAAaC,QAAQ,QAASyB,GAE9B,IAAM1C,EAAO,GAAGgE,MAAMC,KAAK9G,SAASM,iBAAiB,qBACjDuC,EAAKhB,QACLgB,EAAKC,QAAQ,SAAAc,GAAG,OAAIA,EAAI7C,WAG5B8D,EAAGkC,gBACH1D,MAAM2D,YAENnC,EAAGQ,cAAc4B,MAAMC,QAAU,YAGjCZ,MAAM,iEAOFnG,GAEhB,IAAMgH,EAAQnH,SAASC,eAAe,mBAEhCmH,EAAWD,EAAMzG,cAAc,UAGjCP,EAAEQ,OAAOC,UAAUC,SAAS,gBAE5BsG,EAAMF,MAAMC,QAAU,QAEtBE,EAASC,gDAOArH,SAASM,iBAAiB,cAElCwC,QAAQ,SAAAwE,GAAG,OAAIA,EAAIjI,iBAAiB,QAAS,SAAAc,GAAC,OAAIA,EAAEQ,OAAOsC,cAAcA,cAAcA,cAAcgE,MAAMC,QAAU,6CAI7G/G,GAEb,IAAMqC,EAASxC,SAASC,eAAe,cAEjCqH,EAAMtH,SAASC,eAAe,aAGpC,GAAIE,EAAEQ,OAAOC,UAAUC,SAAS,eAAgB,CAE5C,IAAI0G,EAAM1C,EAAGI,SAIO,IAFPjF,SAASM,iBAAiB,QAE9BuB,SACLgD,EAAGI,OAAS,EACZsC,EAAM1C,EAAGI,UAIb,IAAMrB,EAAM5D,SAASU,cAAc,eAC/BkD,GAAKA,EAAIhD,UAAUG,OAAO,cAG9B,IAAMyG,EAAMxH,SAAS2F,cAAc,OAEnC6B,EAAIC,UAAY,iBAEhBD,EAAIlF,UAAJ,6JAAAR,OAG4EyF,EAH5E,8BAAAzF,OAG4GyF,EAH5G,6jBAiBA/E,EAAOkF,aAAaF,EAAKF,GAEzB/E,KAAKoF,YAGL9C,EAAGkC,mDAMM5G,GAEb,IAAMyH,EAAS5H,SAASC,eAAe,iBAEjC4H,EAAQ7H,SAASC,eAAe,UAGtC,GAAIE,EAAEQ,OAAOC,UAAUC,SAAS,aAAc,CAe1C,GAbAgH,EAAMvF,UAAN,wcAamB,EAFLnC,EAAEQ,OAAOsC,cAAcA,cAAc3C,iBAAiB,eAE1DuB,OAEN+F,EAAOX,MAAMC,QAAU,YACpB,CAGH,IAAMtD,EAAMzD,EAAEQ,OAAOsC,cAAcA,cAGnBjD,SAASM,iBAAiB,QAClCwC,QAAQ,SAAAc,GAAG,OAAIA,EAAIhD,UAAUG,OAAO,gBAG5C,IAAM+G,EAAUlE,EAAImE,uBAEhBD,EACAA,EAAQlH,UAAUE,IAAI,cAEtB8C,EAAIoE,mBAAmBpH,UAAUE,IAAI,cAIzCuC,MAAM4E,UAAUrE,GAGhBA,EAAI7C,SAKOf,SAASC,eAAe,aAEhCZ,iBAAiB,QAAS,WAE7B,IAAMuE,EAAMzD,EAAEQ,OAAOsC,cAAcA,cAGnBjD,SAASM,iBAAiB,QAClCwC,QAAQ,SAAAc,GAAG,OAAIA,EAAIhD,UAAUG,OAAO,gBAG5C,IAAM+G,EAAUlE,EAAImE,uBAEhBD,EACAA,EAAQlH,UAAUE,IAAI,cAEtB8C,EAAIoE,mBAAmBpH,UAAUE,IAAI,cAIzCuC,MAAM4E,UAAUrE,GAGhBA,EAAI7C,SAGJ6G,EAAOX,MAAMC,QAAU,OAGvBrC,EAAGkC,kBAIW/G,SAASC,eAAe,cAEhCZ,iBAAiB,QAAS,WAAA,OAAMuI,EAAOX,MAAMC,QAAU,SAGjErC,EAAGkC,mDAQP,OAAO,IAAImB,QAAQ,SAACC,EAASC,GACzB,IAGMC,EAAQrI,SAASC,eAAe,SAEhCqI,EAAatI,SAASU,cAAc,2BAMtC,GAJQV,SAASU,cAAc,QAQ3B,GAA0B,IAAtB2H,EAAM7E,MAAM+E,OAAc,CAE1B,IAAMC,EAAKxI,SAAS2F,cAAc,MAElC6C,EAAGlG,UAAH,8lBAAAR,OAUyC+C,EAAG4D,SAV5C,gBAAA3G,OAUmE+C,EAAG6D,cAVtE,MAAA5G,OAUwFuG,EAAM7E,MAAM2C,QA5BlG,0BA4BiH,QAVnH,6CAcAmC,EAAWK,OAAOH,GAGlBnF,MAAMuF,QAAQJ,GAGd3D,EAAGgE,WAGHR,EAAM7E,MAAQ,GAGdxD,SAASC,eAAe,mBAAmBgH,MAAMC,QAAU,WACxD,CAEH,IAAM4B,EAAW9I,SAASC,eAAe,YAEzC6I,EAASlI,UAAUE,IAAI,cAEvBiI,WAAW,WACPD,EAASlI,UAAUG,OAAO,eAC3B,UA1CPuF,MAAM,wBA6CV6B,yCAQMhI,GAEVA,EAAEQ,OAAOC,UAAUC,SAAS,eAEdb,SAASM,iBAAiB,uCAGlCwC,QAAQ,SAAAW,GACV,GAAIA,EAAKT,QAAT,CAEI,IAAMwF,EAAK/E,EAAKR,cAAcA,cAAcA,cAEtCS,EAAK8E,EAAG9H,cAAc,YAAYiD,aAAa,WAErD6E,EAAGzH,SAGHsC,MAAM2F,WAAWtF,MAQzB1D,SAASC,eAAe,aAAa+C,SAAU,EAG/C6B,EAAGgE,6CAKK1I,GAEZ,IAAMgH,EAAQnH,SAASC,eAAe,kBAGtC,GAAIE,EAAEQ,OAAOC,UAAUC,SAAS,YAAa,CAEzC,IAAI4C,EAAOtD,EAAEQ,OAAOsC,cAAcA,cAAcvC,cAAc,YAE1DgD,EAAKD,EAAKE,aAAa,WAG3BwD,EAAM7E,UAAN,gmBAaA,IAAM8E,EAAWpH,SAASC,eAAe,aAEnCqH,EAAMtH,SAASC,eAAe,aAC9BgJ,EAAUjJ,SAASC,eAAe,WAGxC4E,EAAGqE,eAGH/B,EAAMF,MAAMC,QAAU,QAEtBE,EAAS5D,MAAQC,EAAK0F,UAEtB/B,EAASC,QAGTC,EAAIjI,iBAAiB,QAAS,WACG,IAAzB+H,EAAS5D,MAAM+E,QAEf9E,EAAK0F,UAAY/B,EAAS5D,MAE1BH,MAAM+F,SAAS1F,EAAI0D,EAAS5D,OAE5B2D,EAAMF,MAAMC,QAAU,OAEtBE,EAAS5D,MAAQ,KAEjByF,EAAQrI,UAAUE,IAAI,cACtBiI,WAAW,WAAA,OAAME,EAAQrI,UAAUG,OAAO,eAAe,0CAWrE,OADS,IAAIO,MAAO+H,gDAUpB,OAHYrJ,SAASU,cAAc,eAEjBA,cAAc,cACnB8C,yCAMb,IAAMI,EAAM5D,SAASU,cAAc,eAE7B6C,EAAQK,EAAItD,iBAAiB,kBAE7BgJ,EAAS1F,EAAIlD,cAAc,aAE7B6C,EAAM1B,OAAS,EACfyH,EAAOC,YAAc,GAErBD,EAAOC,YAAP,IAAAzH,OAAyByB,EAAM1B,OAA/B,yCAQJ,IAAMc,EAAM3C,SAASC,eAAe,aAE9BsD,EAAQvD,SAASM,iBAAiB,uCAEpCqC,EAAIK,QACJO,EAAMT,QAAQ,SAAAW,GAAI,OAAIA,EAAKT,SAAU,IAErCO,EAAMT,QAAQ,SAAAW,GAAI,OAAIA,EAAKT,SAAU,4CAOzC,IAAII,EAAMC,MAAMC,UAEVT,EAAO7C,SAASM,iBAAiB,QAEjCkJ,EAASC,MAAMC,KAAK7G,GAEpByE,EAAMtH,SAASU,cAAc,kBAElB,EAAb0C,EAAIvB,QAA8B,EAAhB2H,EAAO3H,OACzByF,EAAI1G,UAAUG,OAAO,oBAErBuG,EAAI1G,UAAUE,IAAI,sDAKTX,GACb,GAAIA,EAAEQ,OAAOC,UAAUC,SAAS,aAAc,CAE1C,IAEI8I,GAFW,IAAIrI,MAAO+H,UAEFxE,EAAG+E,QAEtBD,EAAS,KAAkB,EAATA,IAEnBxJ,EAAEQ,OAAOK,gBAAgB,YAEzBb,EAAEQ,OAAO0G,QAETlH,EAAEQ,OAAOsG,MAAM4C,OAAS,QAI5BhF,EAAG+E,SAAU,IAAItI,MAAO+H,iDAKXlJ,GACbA,EAAEQ,OAAOC,UAAUC,SAAS,eAE5BV,EAAEQ,OAAOM,aAAa,WAAY,IAElCd,EAAEQ,OAAOsG,MAAM4C,OAAS,4CAO5B,IAAMxB,EAAQrI,SAASC,eAAe,UAGtCoI,EAAMhJ,iBAAiB,QAAS,WAE5B,IAAImE,EAAQ6E,EAAM7E,MAAMsG,cAAc3D,QAAQ,QAAS,IAAIU,MAAM,EAAG,GAG9DtD,EAAQvD,SAASM,iBAAiB,2BAClCyJ,EAAUN,MAAMC,KAAKnG,GAGvByG,EAAgBD,EAAQE,OAAO,SAAAxG,GAI/B,OAFWA,EAAK/C,cAAc,YAAY6I,YAAYO,cAE1CI,SAAS1G,KAIE,EAAvBwG,EAAcnI,QAEdkI,EAAQjH,QAAQ,SAAAF,GAAG,OAAIA,EAAIqE,MAAMC,QAAU,SAE3C8C,EAAclH,QAAQ,SAAAF,GAAG,OAAIA,EAAIqE,MAAMC,QAAU,UAGjD6C,EAAQjH,QAAQ,SAAAF,GAAG,OAAIA,EAAIqE,MAAMC,QAAU,oBAUrD7D,iBAEF,SAAAA,EAAYO,EAAKF,EAAIyG,GAAMC,gBAAAlF,KAAA7B,GACvB6B,KAAKtB,IAAMA,EACXsB,KAAKxB,GAAKA,EACVwB,KAAKiF,KAAOA,8DAWZ,OALsC,OAAlCtG,aAAa2B,QAAQ,SACf,GAEAzB,KAAK0B,MAAM5B,aAAa2B,QAAQ,0CAM/BgD,GAEX,IAAIpF,EAAMC,EAAMC,UAGVG,EAAO+E,EAAG9H,cAAc,YAE9B,SAAS2J,EAAKA,GACV,OAAO5G,EAAKE,aAAL,QAAA7B,OAA0BuI,IAGrC,IAAMC,EAAS,IAAIjH,EAAMgH,EAAK,OAAQA,EAAK,MAAO5G,EAAKnB,WAGvDc,EAAImH,KAAKD,GAETzG,aAAaC,QAAQ,QAASC,KAAKC,UAAUZ,uCAK/BM,GAEd,IAAIN,EAAMC,EAAMC,UAGhBF,EAAIN,QAAQ,SAACW,EAAM+G,GACX/G,EAAKC,IAAMA,GACXN,EAAIqH,OAAOD,EAAO,KAK1B3G,aAAaC,QAAQ,QAASC,KAAKC,UAAUZ,qCAIjCM,EAAIyG,GAEhB,IAAI/G,EAAMC,EAAMC,UAGhBF,EAAIN,QAAQ,SAAAW,GACJA,EAAKC,IAAMA,IACXD,EAAK0G,KAAOA,KAKpBtG,aAAaC,QAAQ,QAASC,KAAKC,UAAUZ,sCAIhCQ,GAEb,IAAIR,EAAMC,EAAMC,UAEFM,EAAItD,iBAAiB,qBAG7BwC,QAAQ,SAAA4H,GAEVtH,EAAIN,QAAQ,SAACW,EAAM+G,GACX/G,EAAKC,IAAMgH,EAAG/G,aAAa,YAC3BP,EAAIqH,OAAOD,EAAO,OAM9B3G,aAAaC,QAAQ,QAASC,KAAKC,UAAUZ,wCAM7C,IAFeuH,EAETnI,EAASxC,SAASC,eAAe,cAEjC2K,EAAS5K,SAASC,eAAe,aAEjC4K,EAAQ,0BAGVzH,EAAMC,EAAMC,UAGVT,EAAOO,EAAI0H,IAAI,SAAA/H,GACjB,OAAOA,EAAKa,MAbDmH,EAAAC,2BAiBFC,mBAAO,IAAIC,IAAIrI,KAjBb,IAAA,IAAAsI,EAAA,WAAA,IAoBNC,EApBMT,EAAAnH,MAuBPwG,EAAgB5G,EAAI6G,OAAO,SAAArH,GAC3B,OAAOA,EAAIgB,MAAQwH,IAInBC,EAAc,GAElBrB,EAAclH,QAAQ,SAAAF,GAElByI,GAAW,owBAAAvJ,OAWkDc,EAAIc,GAXtD,gBAAA5B,OAWuEc,EAAIgB,IAX3E,MAAA9B,OAWmFc,EAAIuH,KAAKhE,QAAQ0E,EAAM,QAX1G,sGAiBf,IAAMrD,EAAMxH,SAAS2F,cAAc,OAEnC6B,EAAIC,UAAY,MAEhBD,EAAIlF,UAAJ,6DAAAR,OAC8CkI,EAAcnI,OAD5D,0FAAAC,OAEkEsJ,EAFlE,gcAAAtJ,OAS8BuJ,EAT9B,mFAcA7I,EAAOkF,aAAaF,EAAKoD,GAGb5K,SAASU,cAAc,QAC/BE,UAAUE,IAAI,eAnDtB,IAAAiK,EAAAO,MAAAX,EAAAI,EAAAQ,KAAAC,MAAuBL,IApBR,MAAAtL,GAAAkL,EAAA5K,EAAAN,GAAA,QAAAkL,EAAAU,cAgFvB3L,IAAI4L,SACJxK,OAAOwK,SACPnJ,KAAKmJ,SACL7G,GAAG6G,SAKH5L,IAAIC,QAAQV,iBAAiB,QAASS,IAAI6L,cAAc,GAIxDpJ,KAAKC,OAAOnD,iBAAiB,QAASkD,KAAKqJ,aAAa,GAExDrJ,KAAKE,QAAQpD,iBAAiB,QAASkD,KAAKsJ,cAAc,GAI1DhH,GAAGM,YAAY9F,iBAAiB,QAAS,WAAA,OAAMwF,GAAGQ,cAAc4B,MAAMC,QAAU,UAEhFrC,GAAGO,iBAAiB/F,iBAAiB,QAAS,WAAA,OAAMwF,GAAGQ,cAAc4B,MAAMC,QAAU,SAErFrC,GAAGQ,cAAchG,iBAAiB,QAASwF,GAAGiH,UAE9CjH,GAAGC,cAAczF,iBAAiB,QAASwF,GAAGkH,cAAc,GAE5DlH,GAAGE,QAAQ1F,iBAAiB,QAAS,WAAA,OAAMwF,GAAG+D,UAAUhJ,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,OAAO,GAExFgF,GAAGG,UAAU3F,iBAAiB,QAAS,SAACc,GAAD,OAAO0E,GAAGmE,WAAW7I,KAAI,GAEhE0E,GAAGrC,OAAOnD,iBAAiB,QAAS,SAAAc,GAAC,OAAI0E,GAAGuE,SAASjJ,KAAI,GAEzD0E,GAAGrC,OAAOnD,iBAAiB,QAAS,SAAAc,GAEhC0E,GAAGmH,UAAU7L,GAEb0E,GAAGoD,UAAU9H,KACd,GAEH0E,GAAGlC,IAAItD,iBAAiB,QAASwF,GAAGoH,WAAW,GAE/CpH,GAAGrC,OAAOnD,iBAAiB,QAASwF,GAAGqH,WAAW,GAElDrH,GAAGrC,OAAOnD,iBAAiB,OAAQwF,GAAGsH,eAAe,GAIrD/M,OAAOC,iBAAiB,mBAAoB,WAExC6B,OAAOkL,WAEPC,YAAY,WACRnL,OAAOkL,YACR,KAEHvH,GAAGkC,gBAEHlC,GAAGqE,eAEH7F,MAAM2D,YAENzE,KAAKoF,YAEL9C,GAAGyH,SAEH/J,KAAKgK,mBACLhK,KAAKiK","file":"../script/app.min.js","sourcesContent":["/**\n * @author Eissa Saber\n * @version 1.1.0\n */\n\n//* Register the Service Worker\nif (\"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", function () {\n        navigator.serviceWorker\n            .register(\"/my-note/serviceWorker.js\")\n            .then(res => console.log(\"service worker registered\"))\n            .catch(err => console.log(\"service worker not registered\", err));\n    });\n}\n\n//? control mode\nclass Nav {\n    static global() {\n        Nav.modeCon = document.getElementById('mode');\n        Nav.mode = true;\n    }\n\n    // mode switcher \n    static modeSwitcher(e) {\n        // select buttons\n        const [moon, sun] = document.querySelectorAll('#mode button');\n        // select stylesheet of darkmode\n        const stylesheet = document.querySelector(\"[title=darkmode]\");\n\n        if (e.target.classList.contains('toggleMode')) {\n            if (Nav.mode) { // dark mode\n                // switch btns\n                moon.classList.add('activeMode');\n                sun.classList.remove('activeMode');\n\n                // enable sheet\n                stylesheet.removeAttribute('disabled');\n\n                // die\n                Nav.mode = false;\n\n            } else { // light mode\n                // switch btns\n                moon.classList.remove('activeMode');\n                sun.classList.add('activeMode');\n\n                // disable sheet\n                stylesheet.setAttribute('disabled', \"\");\n\n                // die\n                Nav.mode = true;\n            }\n\n        }\n    }\n\n}\n\n//? sync date\nclass Header {\n    static global() {}\n\n    static syncDate() {\n        // select time container\n        const timeCon = document.querySelector('#date h1');\n        // select date container\n        const dateCon = document.querySelector('#date p');\n        // get date\n        const date = new Date();\n\n        //! hours\n        // am, pm basis\n        const hArr = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n        const hours = date.getHours();\n        const hours_12 = hArr[hours];\n\n        let hL = String(hours_12).length;\n        let h = \"\";\n        let am_pm = \"\";\n\n        // detect chars length\n        if (hL == 1) { // one char\n            h = `0${hours_12}`;\n\n        } else { // two chars\n            h = `${hours_12}`;\n        }\n\n        // detect am, pm\n        if (hours >= 12) {\n            am_pm = \"PM\";\n        } else {\n            am_pm = \"AM\";\n        }\n\n        //! minutes\n        const minutes = date.getMinutes();\n        let mL = String(minutes).length;\n        let m = \"\";\n\n        if (mL == 1) { // one char\n            m = `0${minutes}`;\n\n        } else { // two chars\n            m = `${minutes}`;\n        }\n\n        //! month\n        const mArr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n        const month = date.getMonth();\n\n        //! day\n        const day = date.getDate();\n\n        //* sync time\n        timeCon.innerHTML = `${h} : ${m} <i id=\"am-pm\">${am_pm}</i>`;\n        //* sync date\n        dateCon.innerHTML = `${mArr[month]} ${day}`;\n    }\n\n}\n\n// ?control tabs\nclass Tabs {\n    static global() {\n        Tabs.slider = document.getElementById('tabsSlider');\n        Tabs.btnsCon = document.querySelector('.sliderBtns');\n        Tabs.isDown = false;\n        Tabs.startX;\n        Tabs.scrollLeft;\n    }\n\n    // switch tab\n    static tabSwichter(e) {\n        // select all input\n        const all = document.getElementById('selectAll');\n        // get clicked elem\n        const elm = e.target;\n        // get all tabs\n        const tabs = document.querySelectorAll('.tab');\n\n        if (e.target.classList.contains('tab') || e.target.classList.contains('tasksNum') || e.target.classList.contains('noteTitle')) {\n            // !reset all tabs\n            tabs.forEach(item => item.classList.remove('currentTab'));\n            //! uncheck select all\n            all.checked = false;\n        }\n\n        if (e.target.classList.contains('tab')) {\n            // *active clicked tab\n            elm.classList.add('currentTab');\n        }\n\n        if (e.target.classList.contains('tasksNum')) {\n            // *active clicked tab\n            elm.parentElement.classList.add('currentTab');\n        }\n\n        if (e.target.classList.contains('noteTitle')) {\n            // *active clicked tab\n            elm.parentElement.classList.add('currentTab');\n        }\n    }\n\n    // update title\n    static noteTitle() {\n        // select all title inputs\n        const titles = document.querySelectorAll('.noteTitle');\n\n        // loop through noteTitle\n        titles.forEach(title => {\n            // add keyup event\n            title.addEventListener('keyup', (e) => {\n                // update arr from localStorage\n                let arr = Store.getTask();\n\n                // get current tab\n                const tab = document.querySelector('.currentTab');\n                // get tab title\n                const tasks = tab.querySelectorAll('.content .textCon');\n\n                // update title attr\n                title.setAttribute('title', `${e.target.value}`);\n\n                // loop through tasks\n                tasks.forEach(task => {\n                    // update tasks attr tab in UI\n                    task.setAttribute('data-tab', `${e.target.value}`);\n\n                    //* update tab title of myTask Object in Store\n                    arr.forEach(item => {\n                        if (item.id == task.getAttribute('data-id')) {\n                            item.tab = e.target.value;\n                        }\n                    });\n\n                    //! store tasks to localStorage\n                    localStorage.setItem('tasks', JSON.stringify(arr));\n\n                });\n\n            });\n        });\n\n        // update title without keyup event\n        titles.forEach(title => {\n            title.setAttribute('title', `${title.value}`);\n        });\n    }\n\n    // scroll tabs next/prev\n    static navigateTabs(e) {\n        if (e.target.classList.contains('nextBtn')) { // scroll right\n            Tabs.slider.scrollBy({\n                top: 0,\n                left: 170,\n                behavior: 'smooth'\n            });\n        }\n\n        if (e.target.classList.contains('prevBtn')) { // scroll left\n            Tabs.slider.scrollBy({\n                top: 0,\n                left: -170,\n                behavior: 'smooth'\n            });\n        }\n    }\n\n    // scroll slider by mouse\n    static navSliderByMouse() {\n        // mouse down\n        Tabs.slider.addEventListener('mousedown', (e) => {\n            // active down\n            Tabs.isDown = true;\n            // *get startX point\n            Tabs.startX = e.pageX - Tabs.slider.offsetLeft;\n            // !store last scrollleft value\n            Tabs.scrollLeft = Tabs.slider.scrollLeft;\n        });\n\n        // mouse leave\n        Tabs.slider.addEventListener('mouseleave', () => {\n            // disable down\n            Tabs.isDown = false;\n        });\n\n        // mouse up\n        Tabs.slider.addEventListener('mouseup', () => {\n            // disable down\n            Tabs.isDown = false;\n        });\n\n        // mouse move\n        Tabs.slider.addEventListener('mousemove', (e) => {\n            if (Tabs.isDown) { // if isDown true\n                // prevent default behaviour\n                e.preventDefault();\n                // get moveTo point\n                const x = e.pageX - Tabs.slider.offsetLeft;\n                // calc diff\n                const walk = (x - Tabs.startX);\n                // continue scroll from last scrollleft value - walk\n                Tabs.slider.scrollLeft = Tabs.scrollLeft - walk;\n            }\n        });\n    }\n\n    // scroll slider by touch\n    static navSliderByTouch() {\n        // touchstart\n        Tabs.slider.addEventListener('touchstart', (e) => {\n            // active down\n            Tabs.isDown = true;\n            // *get startX point\n            Tabs.startX = e.touches[0].pageX - Tabs.slider.offsetLeft;\n            // !store last scrollleft value\n            Tabs.scrollLeft = Tabs.slider.scrollLeft;\n        });\n\n        // touchend\n        Tabs.slider.addEventListener('touchend', () => {\n            // disable down\n            Tabs.isDown = false;\n        });\n\n        // touchmove\n        Tabs.slider.addEventListener('touchmove', (e) => {\n            if (Tabs.isDown) { // if isDown true\n                // stop touch event\n                e.stopPropagation();\n                // get moveTo point\n                const x = e.touches[0].pageX - Tabs.slider.offsetLeft;\n                // calc diff\n                const walk = (x - Tabs.startX);\n                // continue scroll from last scrollleft value - walk\n                Tabs.slider.scrollLeft = Tabs.scrollLeft - walk;\n            }\n        });\n\n    }\n\n}\n\n//? handle UI\nclass UI {\n\n    static global() {\n        // select elements\n        UI.slider = document.getElementById('tabsSlider');\n        UI.addNoteBtnCon = document.getElementById('addNote');\n        UI.saveBtn = document.getElementById('saveBtn');\n        UI.delBtnCon = document.querySelector('.deleteCon');\n        UI.all = document.getElementById('selectAll');\n        UI.tabNum = 2;\n        UI.lastTap;\n        this.settingsBtn = document.querySelector('.settingsBtn');\n        this.settingsCloseBtn = document.querySelector('.settingsLayer--closeBtn');\n        this.settingsLayer = document.querySelector('.settingsLayer');\n    }\n\n    // backup/update data \n    static syncData(e) {\n        // select elms \n        const file = document.querySelector('.settingsLayer--input');\n\n        if (e.target.classList.contains('settingsLayer__innerWrapper--backupBtn')) { // backup\n            // get stored data \n            const data = localStorage.getItem('tasks');\n            if (JSON.parse(data) !== null && (JSON.parse(data)).length) {\n                // make file \n                const a = document.createElement(\"a\");\n                const _file = new Blob([data], {\n                    type: 'application/json'\n                });\n                a.href = URL.createObjectURL(_file);\n                const date = new Date().toISOString().replace(/\\..*/g, \"\").replace(/:/g, \"-\").replace(/T/g, \" \");\n                a.download = `My Note ${date}.json`;\n                a.click();\n            } else {\n                alert('No Data to Backup!');\n            }\n        } else if (e.target.classList.contains('settingsLayer__innerWrapper--updateBtn')) { // update\n            file.click();\n        }\n\n        // extract data from file \n        file.addEventListener('change', e => {\n            const reader = new FileReader();\n            reader.readAsText(e.target.files[0]);\n            reader.onload = e => {\n                const data = e.target.result;\n\n                if (JSON.parse(data) !== null && (JSON.parse(data)).length) {\n                    //! update storage \n                    localStorage.setItem('tasks', data);\n                    //! wipe out tabs \n                    const tabs = [].slice.call(document.querySelectorAll(\"#tabsSlider .tab\"));\n                    if (tabs.length) {\n                        tabs.forEach(tab => tab.remove());\n                    }\n                    //* update UI \n                    UI.animateTabBtn();\n                    Store.loadTasks();\n                    // hide settings layer \n                    UI.settingsLayer.style.display = \"none\";\n\n                } else {\n                    alert('No Data in This File!');\n                }\n            };\n        });\n    }\n\n    // *showTextarea\n    static showTextarea(e) {\n        // select layer\n        const layer = document.getElementById('inputBoxWrapper');\n        // select textarea\n        const textarea = layer.querySelector('#input');\n\n        //* if add note button clicked\n        if (e.target.classList.contains('addNoteBtn')) { // if addNoteBtn class clicked\n            // show layer\n            layer.style.display = 'block';\n            // add focus\n            textarea.focus();\n        }\n    }\n\n    // !hideTextarea\n    static hideTextarea() {\n        // select cancel buttons\n        const btns = document.querySelectorAll('.cancelBtn');\n        // add click event\n        btns.forEach(btn => btn.addEventListener('click', e => e.target.parentElement.parentElement.parentElement.style.display = 'none'));\n    }\n\n    // *add new tab\n    static addNewTab(e) {\n        // select tabs slider\n        const slider = document.getElementById('tabsSlider');\n        // select add new tab button\n        const btn = document.getElementById('addNewTab');\n\n        //* if add tab button clicked \n        if (e.target.classList.contains('clickAddTab')) { // if clickAddTab class clicked\n            // sync tab tasks' number\n            let num = UI.tabNum++;\n            // select all tabs\n            const tabs = document.querySelectorAll('.tab');\n            // reset number if all tabs deleted\n            if (tabs.length === 0) {\n                UI.tabNum = 1;\n                num = UI.tabNum++;\n            }\n\n            //! remove currentTab class from all tabs\n            const tab = document.querySelector('.currentTab');\n            if (tab) tab.classList.remove('currentTab');\n\n            // create div\n            const div = document.createElement('div');\n            // add class\n            div.className = 'tab currentTab';\n            // append to div\n            div.innerHTML = `\n                                <span class=\"tasksNum\"></span>\n\n                                <input class=\"noteTitle\" type=\"text\" value=\"New Note (${num})\" placeholder=\"New Note (${num})\" readonly>\n                                \n                                <button class=\"xBtn\" type=\"button\">\n                                    <i class=\"clickXBtn\"></i>\n                                    <span class=\"clickXBtn\"></span>\n                                    <span class=\"clickXBtn\"></span>\n                                </button>\n                                \n                                <div class=\"content\">\n                                    <ul></ul>\n                                </div>\n                                `;\n\n            //* append new tab before addBtn\n            slider.insertBefore(div, btn);\n            //* init titleUpdate fn\n            Tabs.noteTitle();\n\n            // init tab btn animation\n            UI.animateTabBtn();\n        }\n\n    }\n\n    // !remove tab\n    static removeTab(e) {\n        // select confirm parent\n        const parent = document.getElementById('checkQWrapper');\n        // select confirm child\n        const child = document.getElementById('checkQ');\n\n        //! if remove button clicked\n        if (e.target.classList.contains('clickXBtn')) { // if clickXBtn class clicked\n            //* update child content\n            child.innerHTML = `\n                                <div>\n                                    <p>Are you really want to delete this?</p>\n                                </div>\n                                <div>\n                                    <button type=\"button\" id=\"cancelBtn2\">cancel</button>\n                                    <button type=\"button\" id=\"deleteBtn\">delete</button>\n                                </div>\n                                `;\n\n            // select all tasks of selected tab\n            const tasks = e.target.parentElement.parentElement.querySelectorAll('.content li');\n\n            if (tasks.length > 0) { // if tab is full of tasks\n                // *show confirm parent\n                parent.style.display = \"block\";\n            } else { // if tab empty of tasks\n\n                // *select tab\n                const tab = e.target.parentElement.parentElement;\n\n                // !remove currentTab class from all tabs\n                const allTabs = document.querySelectorAll('.tab');\n                allTabs.forEach(tab => tab.classList.remove('currentTab'));\n\n                // *select previous tab\n                const prevTab = tab.previousElementSibling;\n                // * add currentTab class\n                if (prevTab) { // if exists\n                    prevTab.classList.add('currentTab');\n                } else { // if no prev element exists | add to next then\n                    tab.nextElementSibling.classList.add('currentTab');\n                }\n\n                // init remove tab\n                Store.removeTab(tab);\n\n                // remove clicked tab\n                tab.remove();\n\n            }\n\n            // select delete button\n            const delBtn = document.getElementById('deleteBtn');\n            //* add click event to delete button\n            delBtn.addEventListener('click', () => { // if delete button clicked\n                // *select tab\n                const tab = e.target.parentElement.parentElement;\n\n                // !remove currentTab class from all tabs\n                const allTabs = document.querySelectorAll('.tab');\n                allTabs.forEach(tab => tab.classList.remove('currentTab'));\n\n                // *select previous tab\n                const prevTab = tab.previousElementSibling;\n                // * add currentTab class\n                if (prevTab) { // if exists\n                    prevTab.classList.add('currentTab');\n                } else { // if no prev element exists | add to next then\n                    tab.nextElementSibling.classList.add('currentTab');\n                }\n\n                // init remove tab\n                Store.removeTab(tab);\n\n                // remove clicked tab\n                tab.remove();\n\n                // !hide confirm parent\n                parent.style.display = \"none\";\n\n                // init tab btn animation\n                UI.animateTabBtn();\n            });\n\n            // select cancel button\n            const cancelBtn = document.getElementById('cancelBtn2');\n            //! add click event to cancel button | hide confirm parent\n            cancelBtn.addEventListener('click', () => parent.style.display = \"none\");\n\n            // init tab btn animation\n            UI.animateTabBtn();\n\n        }\n\n    }\n\n    //* add task to tab\n    static addTask() {\n        return new Promise((resolve, reject) => {\n            let error = false;\n            const regex = /&nbsp;|[\\n\\r]|\\u21b5|↵/g; // for detecting space and line break\n            // select textarea element\n            const input = document.getElementById('input');\n            // select current tab\n            const currentTab = document.querySelector('.currentTab .content ul');\n            // select tab\n            const tab = document.querySelector('.tab');\n\n            if (!error) {\n                //! show alert if there are no tabs\n                if (!tab) {\n                    alert('Please create a tab!');\n                } else { //* if there are tabs\n                    // check if inserted value not empty\n                    if (input.value.trim() != \"\") {\n                        // create li \n                        const li = document.createElement('li');\n                        // add content to li\n                        li.innerHTML = `\n                                <span class=\"editCon\">\n                                    <img src=\"img/edit-pen.svg\" class=\"editNote\" alt=\"edit-pen\">\n                                </span>\n                                <span class=\"selectCon\">\n                                    <label>\n                                        <input class=\"selectItem\" type=\"checkbox\">\n                                        <span class=\"check\"></span>\n                                    </label>\n                                </span>\n                                <span class=\"textCon\" data-id=\"${UI.makeId()}\" data-tab=\"${UI.getTabTitle()}\">${input.value.replace(regex, \"<br>\")}</span>\n                                `;\n\n                        //* append li to currentTab\n                        currentTab.append(li);\n\n                        //? init add task\n                        Store.addTask(li);\n\n                        // init tasks number\n                        UI.tasksNum();\n\n                        //! wipe out textarea\n                        input.value = '';\n\n                        //! hide textarea\n                        document.getElementById('inputBoxWrapper').style.display = 'none';\n                    } else {\n                        // select textarea \n                        const inputBox = document.getElementById('inputBox');\n                        //* add class \n                        inputBox.classList.add('emptyInput');\n                        //! remove class\n                        setTimeout(() => {\n                            inputBox.classList.remove('emptyInput');\n                        }, 300);\n                    }\n                }\n                resolve();\n            } else {\n                reject('Error while creating your task!')\n            }\n        });\n    }\n\n    //! remove task from tab\n    static removeTask(e) {\n        //* if delete button clicked\n        if (e.target.classList.contains('deleteBtn')) { // if deleteBtn class clicked\n            // select tasks\n            const tasks = document.querySelectorAll('.currentTab .content li .selectItem');\n\n            // loop through tasks\n            tasks.forEach(task => {\n                if (task.checked) {\n                    // get li\n                    const li = task.parentElement.parentElement.parentElement;\n                    // get removed task id\n                    const id = li.querySelector('.textCon').getAttribute('data-id');\n                    // remove checked lis\n                    li.remove();\n\n                    // init remove task\n                    Store.removeTask(id);\n\n                } else {\n                    return;\n                }\n            });\n\n            //! uncheck select all\n            document.getElementById('selectAll').checked = false;\n\n            // init tasks number\n            UI.tasksNum();\n        }\n    }\n\n    // edit task from tab\n    static editTask(e) {\n        // select layer\n        const layer = document.getElementById('editBoxWrapper');\n\n        //* if edit btn clicked\n        if (e.target.classList.contains('editNote')) {\n            // get task\n            let task = e.target.parentElement.parentElement.querySelector('.textCon');\n            // get task id\n            let id = task.getAttribute('data-id');\n\n            //* update layer content for seperating each task\n            layer.innerHTML = `\n                                <div id=\"editBox\">\n                                <div class=\"top\">\n                                    <button class=\"cancelBtn\" type=\"button\">cancel</button>\n                                    <button type=\"button\" id=\"updateBtn\">update</button>\n                                </div>\n                                <div class=\"bottom\">\n                                    <textarea id=\"editInput\" placeholder=\"Edit Your Note Here...\"></textarea>\n                                </div>\n                                </div>\n                                `;\n\n            // select textarea\n            const textarea = document.getElementById('editInput');\n            // select update button\n            const btn = document.getElementById('updateBtn');\n            const editBox = document.getElementById(\"editBox\");\n\n            // init hideTextarea fn\n            UI.hideTextarea();\n\n            //* show layer\n            layer.style.display = 'block';\n            // sync task value\n            textarea.value = task.innerText;\n            // add focus \n            textarea.focus();\n\n            //* add click event to update button\n            btn.addEventListener('click', () => {\n                if (textarea.value.trim() != \"\") {\n                    // update task\n                    task.innerText = textarea.value;\n                    // init edit task\n                    Store.editTask(id, textarea.value);\n                    //! hide layer\n                    layer.style.display = 'none';\n                    // wipe out field\n                    textarea.value = '';\n                } else {\n                    editBox.classList.add('emptyInput');\n                    setTimeout(() => editBox.classList.remove('emptyInput'), 300);\n                }\n            });\n\n        }\n\n    }\n\n    // generate unique id\n    static makeId() {\n        let id = new Date().getTime();\n        return id;\n    }\n\n    // tab title\n    static getTabTitle() {\n        // get current tab\n        const tab = document.querySelector('.currentTab');\n        // get tab title\n        const input = tab.querySelector('.noteTitle');\n        return input.value;\n    }\n\n    // tasks number\n    static tasksNum() {\n        // get currentTab\n        const tab = document.querySelector('.currentTab');\n        // select tasks\n        const tasks = tab.querySelectorAll('.content ul li');\n        // select num container\n        const numCon = tab.querySelector('.tasksNum');\n\n        if (tasks.length < 1) {\n            numCon.textContent = \"\";\n        } else {\n            numCon.textContent = `(${tasks.length})`;\n        }\n\n    }\n\n    // select all tasks at once\n    static selectAll() {\n        // select all input\n        const all = document.getElementById('selectAll');\n        // select all tasks in current tab\n        const tasks = document.querySelectorAll('.currentTab .content li .selectItem');\n\n        if (all.checked) { //* if all selected\n            tasks.forEach(task => task.checked = true);\n        } else { //! if all not selected \n            tasks.forEach(task => task.checked = false);\n        }\n    }\n\n    // handle add tab button Animation\n    static animateTabBtn() {\n        // get tasks from localStorage\n        let arr = Store.getTask();\n        // select all tabs\n        const tabs = document.querySelectorAll('.tab');\n        // convert it to Array\n        const myTabs = Array.from(tabs);\n        // select btn\n        const btn = document.querySelector('#addNewTab div');\n\n        if (arr.length > 0 || myTabs.length > 0) { // empty of tabs\n            btn.classList.remove('animateAddNewTab');\n        } else {\n            btn.classList.add('animateAddNewTab');\n        }\n    }\n\n    // renameTab\n    static renameTab(e) {\n        if (e.target.classList.contains('noteTitle')) { // if dbl clicked on tab input\n            // get time at 1st click\n            let firstTap = new Date().getTime();\n            // get diffrence between 1st and last click\n            let differ = firstTap - UI.lastTap;\n\n            if ((differ < 600) && (differ > 0)) { // if dbl click occured during 0.6 second\n                //* remove disable attr\n                e.target.removeAttribute('readonly');\n                // add focus\n                e.target.focus();\n                // add cursor shape\n                e.target.style.cursor = 'text';\n            }\n\n            // get time at last click\n            UI.lastTap = new Date().getTime();\n        }\n    }\n\n    // disableRename\n    static disableRename(e) {\n        if (e.target.classList.contains('noteTitle')) { // if blured tab input\n            //! add disable attr\n            e.target.setAttribute('readonly', '');\n            // add cursor shape\n            e.target.style.cursor = 'pointer';\n        }\n    }\n\n    // search engine\n    static engine() {\n        // select engine input \n        const input = document.getElementById('engine');\n\n        //* add keyup event to input\n        input.addEventListener('keyup', () => {\n            // get input value\n            let value = input.value.toLowerCase().replace(/^\\s+/g, '').slice(0, 3);\n\n            // select tasks in current tab\n            const tasks = document.querySelectorAll('.currentTab .content li');\n            const myTasks = Array.from(tasks);\n\n            // filter tasks\n            let filteredTasks = myTasks.filter(task => {\n                // get text\n                let text = task.querySelector('.textCon').textContent.toLowerCase();\n\n                return text.includes(value);\n            });\n\n            // show/hide tasks\n            if (filteredTasks.length > 0) {\n                //! hide all tasks\n                myTasks.forEach(elm => elm.style.display = 'none');\n                //* show matched tasks\n                filteredTasks.forEach(elm => elm.style.display = 'grid');\n            } else {\n                //* show all tasks\n                myTasks.forEach(elm => elm.style.display = 'grid');\n            }\n\n        });\n\n    }\n\n}\n\n//? handle storage\nclass Store {\n\n    constructor(tab, id, text) {\n        this.tab = tab;\n        this.id = id;\n        this.text = text;\n    }\n\n    // get tasks\n    static getTask() {\n        let arr;\n        if (localStorage.getItem('tasks') === null) { // if local storage is empty\n            arr = [];\n        } else { // if local storage is full\n            arr = JSON.parse(localStorage.getItem('tasks'));\n        }\n        return arr;\n    }\n\n    // add task\n    static addTask(li) {\n        // update arr from localStorage\n        let arr = Store.getTask();\n\n        // select task \n        const task = li.querySelector('.textCon');\n        // get attribute value\n        function attr(attr) {\n            return task.getAttribute(`data-${attr}`);\n        }\n        // init task object\n        const myTask = new Store(attr('tab'), attr('id'), task.innerHTML);\n\n        //* push objects to array\n        arr.push(myTask);\n        //! store tasks to localStorage\n        localStorage.setItem('tasks', JSON.stringify(arr));\n\n    }\n\n    // remove task\n    static removeTask(id) {\n        // update arr from localStorage\n        let arr = Store.getTask();\n\n        // loop for deleting desired tasks\n        arr.forEach((task, index) => {\n            if (task.id == id) {\n                arr.splice(index, 1);\n            }\n        });\n\n        //! store tasks to localStorage\n        localStorage.setItem('tasks', JSON.stringify(arr));\n    }\n\n    // edit task\n    static editTask(id, text) {\n        // update arr from localStorage\n        let arr = Store.getTask();\n\n        // loop for deleting desired tasks\n        arr.forEach(task => {\n            if (task.id == id) {\n                task.text = text;\n            }\n        });\n\n        //! store tasks to localStorage\n        localStorage.setItem('tasks', JSON.stringify(arr));\n    }\n\n    // remove tab\n    static removeTab(tab) {\n        // update arr from localStorage\n        let arr = Store.getTask();\n        // select all tasks \n        const tasks = tab.querySelectorAll('.content .textCon');\n\n        // loop through all tasks of current tab\n        tasks.forEach(ts => {\n            // loop for deleting desired tasks\n            arr.forEach((task, index) => {\n                if (task.id == ts.getAttribute('data-id')) {\n                    arr.splice(index, 1);\n                }\n            });\n        });\n\n        //! store tasks to localStorage\n        localStorage.setItem('tasks', JSON.stringify(arr));\n    }\n\n    // get taks from localStorage\n    static loadTasks() {\n        // select tabs slider\n        const slider = document.getElementById('tabsSlider');\n        // select add btn\n        const addBtn = document.getElementById('addNewTab');\n\n        const regex = /&nbsp;|[\\n\\r]|\\u21b5|↵/g; // for detecting space and line break\n\n        //* get tasks from localStorage\n        let arr = Store.getTask();\n\n        // get all tabs' titles\n        const tabs = arr.map(item => {\n            return item.tab;\n        });\n\n        // remove dublicated tabs\n        const netTabs = [...new Set(tabs)];\n\n        // loop through tabs\n        for (let i of netTabs) {\n\n            // filter tasks based on each tab\n            let filteredTasks = arr.filter(elm => {\n                return elm.tab === i;\n            });\n\n            // define a tasksHolder\n            let tasksHolder = \"\";\n            // looping through filteredTasks\n            filteredTasks.forEach(elm => {\n                //* append to tasksHolder\n                tasksHolder += `\n                                        <li>\n                                            <span class=\"editCon\">\n                                                <img src=\"img/edit-pen.svg\" class=\"editNote\" alt=\"edit-pen\">\n                                            </span>\n                                            <span class=\"selectCon\">\n                                                <label>\n                                                    <input class=\"selectItem\" type=\"checkbox\">\n                                                    <span class=\"check\"></span>\n                                                </label>\n                                            </span>\n                                            <span class=\"textCon\" data-id=\"${elm.id}\" data-tab=\"${elm.tab}\">${elm.text.replace(regex,\"<br>\")}</span>\n                                        </li>\n                                        `;\n            });\n\n            // create div\n            const div = document.createElement('div');\n            // add class\n            div.className = 'tab';\n            // append to div\n            div.innerHTML = `\n                                <span class=\"tasksNum\">(${filteredTasks.length})</span>\n                                <input class=\"noteTitle\" type=\"text\" value=\"${i}\" placeholder=\"New Note\" readonly>\n                                <button class=\"xBtn\" type=\"button\">\n                                    <i class=\"clickXBtn\"></i>\n                                    <span class=\"clickXBtn\"></span>\n                                    <span class=\"clickXBtn\"></span>\n                                </button>\n                                <div class=\"content\">\n                                    <ul>${tasksHolder}</ul>\n                                </div>\n                                `;\n\n            // apppend div to tab container\n            slider.insertBefore(div, addBtn);\n\n            //* activate 1st tab\n            const tab = document.querySelector('.tab');\n            tab.classList.add('currentTab');\n\n        }\n\n    }\n\n}\n\n// init global\nNav.global();\nHeader.global();\nTabs.global();\nUI.global();\n\n// !EVENTS\n//* Nav\n// click event for modeSwitcher\nNav.modeCon.addEventListener('click', Nav.modeSwitcher, true);\n\n//* Tabs\n// click event for tabSwichter\nTabs.slider.addEventListener('click', Tabs.tabSwichter, true);\n//  click event for tabs navigation\nTabs.btnsCon.addEventListener('click', Tabs.navigateTabs, true);\n\n//* UI\n// show settings layer \nUI.settingsBtn.addEventListener('click', () => UI.settingsLayer.style.display = \"block\");\n// hide settings layer \nUI.settingsCloseBtn.addEventListener('click', () => UI.settingsLayer.style.display = \"none\");\n// backup/update data \nUI.settingsLayer.addEventListener('click', UI.syncData);\n// click add note button\nUI.addNoteBtnCon.addEventListener('click', UI.showTextarea, true);\n// click save task\nUI.saveBtn.addEventListener('click', () => UI.addTask().catch(err => console.log(err)), true);\n// click remove task\nUI.delBtnCon.addEventListener('click', (e) => UI.removeTask(e), true);\n// click edit btn\nUI.slider.addEventListener('click', e => UI.editTask(e), true);\n// click add/remove tab\nUI.slider.addEventListener('click', e => {\n    // init add new tab fn\n    UI.addNewTab(e);\n    // init remove tab fn\n    UI.removeTab(e);\n}, true);\n// click select all\nUI.all.addEventListener('click', UI.selectAll, true);\n// dbclick to rename tab\nUI.slider.addEventListener('click', UI.renameTab, true);\n// blur to disable renaming tab\nUI.slider.addEventListener('blur', UI.disableRename, true);\n\n\n//* DOMContentLoaded\nwindow.addEventListener('DOMContentLoaded', () => {\n    // sync date\n    Header.syncDate();\n    // sync date each minute\n    setInterval(() => {\n        Header.syncDate();\n    }, 1 * 60 * 1000);\n    // init tab btn animation\n    UI.animateTabBtn();\n    // init hide textarea\n    UI.hideTextarea();\n    // display tasks\n    Store.loadTasks();\n    // update note title\n    Tabs.noteTitle();\n    // init engine\n    UI.engine();\n    // init scroll slider mouse/touch\n    Tabs.navSliderByMouse();\n    Tabs.navSliderByTouch();\n});"]}